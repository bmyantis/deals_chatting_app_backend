// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/swipe.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	data "deals_chatting_app_backend/internal/data"
	model "deals_chatting_app_backend/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockSwipeService is a mock of SwipeService interface.
type MockSwipeService struct {
	ctrl     *gomock.Controller
	recorder *MockSwipeServiceMockRecorder
}

// MockSwipeServiceMockRecorder is the mock recorder for MockSwipeService.
type MockSwipeServiceMockRecorder struct {
	mock *MockSwipeService
}

// NewMockSwipeService creates a new mock instance.
func NewMockSwipeService(ctrl *gomock.Controller) *MockSwipeService {
	mock := &MockSwipeService{ctrl: ctrl}
	mock.recorder = &MockSwipeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSwipeService) EXPECT() *MockSwipeServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSwipeService) Create(arg0 *data.CreateSwipeRequest, arg1 uuid.UUID, arg2 context.Context) (*model.Swipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Swipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSwipeServiceMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSwipeService)(nil).Create), arg0, arg1, arg2)
}
