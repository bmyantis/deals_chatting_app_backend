// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	data "deals_chatting_app_backend/internal/data"
	model "deals_chatting_app_backend/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserService) Create(arg0 *data.UserRequest, arg1 context.Context) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserService)(nil).Create), arg0, arg1)
}

// CreateOrUpdatePreferences mocks base method.
func (m *MockUserService) CreateOrUpdatePreferences(arg0 *data.CreateOrUpdatePreferencesRequest, arg1 uuid.UUID, arg2 context.Context) (*model.Preferences, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdatePreferences", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Preferences)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdatePreferences indicates an expected call of CreateOrUpdatePreferences.
func (mr *MockUserServiceMockRecorder) CreateOrUpdatePreferences(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdatePreferences", reflect.TypeOf((*MockUserService)(nil).CreateOrUpdatePreferences), arg0, arg1, arg2)
}

// CreateOrUpdateProfile mocks base method.
func (m *MockUserService) CreateOrUpdateProfile(arg0 *data.CreateOrUpdateProfileRequest, arg1 uuid.UUID, arg2 context.Context) (*model.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateProfile", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateProfile indicates an expected call of CreateOrUpdateProfile.
func (mr *MockUserServiceMockRecorder) CreateOrUpdateProfile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateProfile", reflect.TypeOf((*MockUserService)(nil).CreateOrUpdateProfile), arg0, arg1, arg2)
}

// FindAll mocks base method.
func (m *MockUserService) FindAll(ctx context.Context, userID uuid.UUID) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, userID)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockUserServiceMockRecorder) FindAll(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockUserService)(nil).FindAll), ctx, userID)
}

// GetProfileByUserID mocks base method.
func (m *MockUserService) GetProfileByUserID(ctx context.Context, userID uuid.UUID) (*model.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByUserID", ctx, userID)
	ret0, _ := ret[0].(*model.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByUserID indicates an expected call of GetProfileByUserID.
func (mr *MockUserServiceMockRecorder) GetProfileByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByUserID", reflect.TypeOf((*MockUserService)(nil).GetProfileByUserID), ctx, userID)
}

// Login mocks base method.
func (m *MockUserService) Login(arg0 *data.UserLoginRequest, arg1 context.Context) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), arg0, arg1)
}
