// Code generated by MockGen. DO NOT EDIT.
// Source: internal/controller/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockUserController is a mock of UserController interface.
type MockUserController struct {
	ctrl     *gomock.Controller
	recorder *MockUserControllerMockRecorder
}

// MockUserControllerMockRecorder is the mock recorder for MockUserController.
type MockUserControllerMockRecorder struct {
	mock *MockUserController
}

// NewMockUserController creates a new mock instance.
func NewMockUserController(ctrl *gomock.Controller) *MockUserController {
	mock := &MockUserController{ctrl: ctrl}
	mock.recorder = &MockUserControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserController) EXPECT() *MockUserControllerMockRecorder {
	return m.recorder
}

// CreateOrUpdatePreferences mocks base method.
func (m *MockUserController) CreateOrUpdatePreferences(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateOrUpdatePreferences", ctx)
}

// CreateOrUpdatePreferences indicates an expected call of CreateOrUpdatePreferences.
func (mr *MockUserControllerMockRecorder) CreateOrUpdatePreferences(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdatePreferences", reflect.TypeOf((*MockUserController)(nil).CreateOrUpdatePreferences), ctx)
}

// CreateOrUpdateProfile mocks base method.
func (m *MockUserController) CreateOrUpdateProfile(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateOrUpdateProfile", ctx)
}

// CreateOrUpdateProfile indicates an expected call of CreateOrUpdateProfile.
func (mr *MockUserControllerMockRecorder) CreateOrUpdateProfile(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateProfile", reflect.TypeOf((*MockUserController)(nil).CreateOrUpdateProfile), ctx)
}

// FindAll mocks base method.
func (m *MockUserController) FindAll(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindAll", ctx)
}

// FindAll indicates an expected call of FindAll.
func (mr *MockUserControllerMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockUserController)(nil).FindAll), ctx)
}

// Login mocks base method.
func (m *MockUserController) Login(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Login", ctx)
}

// Login indicates an expected call of Login.
func (mr *MockUserControllerMockRecorder) Login(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserController)(nil).Login), ctx)
}

// Signup mocks base method.
func (m *MockUserController) Signup(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Signup", ctx)
}

// Signup indicates an expected call of Signup.
func (mr *MockUserControllerMockRecorder) Signup(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockUserController)(nil).Signup), ctx)
}
